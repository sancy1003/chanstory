// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int         @id @default(autoincrement())
  account       String      @unique
  nickname      String      @unique
  password      String
  profileURL    String?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  status        Int         @default(1)
  role          Role        @default(USER)
  comments      Comment[]
  recomments    Recomment[]
  tegedComments Recomment[] @relation("TagUser")
}

model Post {
  id           Int         @id @default(autoincrement())
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  isHide       Boolean     @default(false)
  thumbnailURL String?     @db.MediumText
  title        String      @db.MediumText
  content      String?     @db.LongText
  imageURLs    String?     @db.MediumText
  tags         String?     @db.MediumText
  category     Int?
  type         PostType    @default(POST)
  comments     Comment[]
  recomments   Recomment[]
}

model Comment {
  id         Int         @id @default(autoincrement())
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  author     User        @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId   Int
  post       Post        @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId     Int
  content    String      @db.MediumText
  status     Int         @default(1)
  recomments Recomment[]

  @@index([authorId, postId])
}

model Recomment {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId  Int
  comment   Comment  @relation(fields: [commentId], references: [id], onDelete: Cascade)
  commentId Int
  tagUser   User?    @relation(name: "TagUser", fields: [taguserId], references: [id])
  taguserId Int?
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    Int
  content   String   @db.MediumText
  status    Int      @default(1)

  @@index([authorId, postId, commentId, taguserId])
}

enum Role {
  USER
  ADMIN
}

enum PostType {
  POST
  GALLERY
}
